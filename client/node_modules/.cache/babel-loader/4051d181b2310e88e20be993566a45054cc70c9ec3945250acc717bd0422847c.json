{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/ty/projects/curio/client/src/pages/Form.js\",\n  _s = $RefreshSig$();\nimport { Header } from \"../components\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { getTrack } from \"../spotify\";\nimport { useEffect } from \"react\";\nimport Playlist from \"../components/Playlist\";\nimport { useNavigate } from 'react-router-dom';\n\n// import { useNavigate } from 'react-router-dom'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Input = _styled.input.withConfig({\n  displayName: \"Form__Input\",\n  componentId: \"sc-1ljs4gr-0\"\n})([\"&:focus{outline:none;}color:white;font-size:1em;border:1px;background-color:black;border-bottom:1px solid grey;width:570px;margin-top:100px;margin-bottom:20px;padding-left:0px;padding-bottom:15px;\"]);\n_c = Input;\nconst StartContainer = _styled.main.withConfig({\n  displayName: \"Form__StartContainer\",\n  componentId: \"sc-1ljs4gr-1\"\n})([\"display:flex;flex-direction:column;justify-content:center;align-items:center;height:87.5vh;background-color:#000;align-items:center;\"]);\n_c2 = StartContainer;\nconst StyledHeadline = _styled.div.withConfig({\n  displayName: \"Form__StyledHeadline\",\n  componentId: \"sc-1ljs4gr-2\"\n})([\"color:white;line-height:58px;font-size:60px;padding:5px;font-size:50px;\"]);\n_c3 = StyledHeadline;\nconst StyledOkButton = _styled.a.withConfig({\n  displayName: \"Form__StyledOkButton\",\n  componentId: \"sc-1ljs4gr-3\"\n})([\"line-height:15px;margin-right:490px;margin-top:10px;display:inline-block;background-color:#603dd3;color:var(--white);border-radius:10px;font-weight:7 00;font-family:Inter,Arial;font-size:1rem;letter-spacing:0.1px;padding:var(--spacing-sm) var(--spacing-xl);&:hover,&:focus{text-decoration:none;filter:brightness(1.1);}\"]);\n_c4 = StyledOkButton;\nconst StyledFinishButton = _styled.a.withConfig({\n  displayName: \"Form__StyledFinishButton\",\n  componentId: \"sc-1ljs4gr-4\"\n})([\"line-height:15px;margin-right:10px;margin-top:10px;display:inline-block;background-color:#603dd3;color:var(--white);border-radius:10px;font-weight:7 00;font-family:Inter,Arial;font-size:1rem;letter-spacing:0.1px;padding:var(--spacing-sm) var(--spacing-xl);margin-top:140px;&:hover,&:focus{text-decoration:none;filter:brightness(1.1);}\"]);\n_c5 = StyledFinishButton;\nconst questions = [\"How are you feeling today?\", \"What type of music you feel like listening to?\", \"What activity are currently doing?\"];\nlet userResponse = \"\";\nlet current_question = 0;\nlet arr = [];\nconst Forms = () => {\n  _s();\n  const [question, setQuestion] = useState(questions[current_question]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [endQuestions, setEndQuestions] = useState(false);\n  const [sendRequest, setSendRequesst] = useState(false);\n  const [songs, setSongs] = useState(null);\n  const [getSongsAssets, setSongAssets] = useState(null);\n  const navigate = useNavigate();\n\n  // Helper Function\n  // Parse songs from GPT Response\n  const parseSongs = listOfSongs => {\n    let songs = {};\n    let data = JSON.stringify(listOfSongs);\n\n    // Need to JSON.parse twice to get object\n    let song_dict = JSON.parse(JSON.parse(data));\n    for (let [artist, song] of Object.entries(song_dict)) {\n      songs[artist] = song;\n    }\n    return songs;\n  };\n\n  // Helper Function\n  // Takes in object of songs {artistName, songName} and\n  // returns songs assets {artisstImage, trackName, artistName}\n\n  useEffect(() => {\n    const getSongsAssets = async songs => {\n      let data = null;\n      let counter = 0;\n      const searchLimit = 5;\n      const songAssets = [];\n\n      // Calls Spotify API to get song assets\n      for (let [artist, song] of Object.entries(songs)) {\n        if (counter === searchLimit) {\n          break;\n        } else {\n          counter++;\n          let track_query = song + \" \" + artist;\n          data = await getTrack(track_query);\n          songAssets.push(data);\n        }\n      }\n      return songAssets;\n    };\n  }, []);\n  useEffect(() => {\n    if (sendRequest) {\n      const body = JSON.stringify({\n        userInput: userResponse\n      });\n\n      // Call backend to generate respsonse from OpenAI API\n      axios.post(\"http://localhost:8888/generate\", body).then(async res => {\n        // Returns a object of songs: {\"song_name\", \"artist_name\"}\n        const songs = parseSongs(res.data.output.text);\n        try {\n          let songAssets = await getSongsAssets(songs);\n          setSongs(songAssets);\n          console.log(songAssets);\n        } catch (error) {\n          console.error(`Failed to get SongAssets from Spotify: ${error}`);\n        }\n      });\n    }\n  }, [sendRequest]);\n\n  // Onclick function to reload next question\n  const nextQuestion = () => {\n    current_question++;\n    if (current_question === questions.length) {\n      setEndQuestions(true);\n    }\n    setQuestion(questions[current_question]);\n    userResponse += ` ${userInput.toString()}`;\n  };\n  const onUserChangedText = event => {\n    setUserInput(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StartContainer, {\n      children: [endQuestions ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(StyledHeadline, {\n          children: \"Ready!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StyledFinishButton, {\n          onClick: () => setSendRequesst(true),\n          children: \"Get Playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(StyledHeadline, {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Type here\",\n          onChange: onUserChangedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StyledOkButton, {\n          onClick: nextQuestion,\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), songs ?\n      // <Playlist artist={songs} />\n      navigate('/artist', {\n        state: songs\n      }) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Songs not loaded yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Forms, \"pQ/V1uey3CgJMZBa1ThoBAAOHe8=\", false, function () {\n  return [useNavigate];\n});\n_c6 = Forms;\nexport default Forms;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Input\");\n$RefreshReg$(_c2, \"StartContainer\");\n$RefreshReg$(_c3, \"StyledHeadline\");\n$RefreshReg$(_c4, \"StyledOkButton\");\n$RefreshReg$(_c5, \"StyledFinishButton\");\n$RefreshReg$(_c6, \"Forms\");","map":{"version":3,"names":["Header","React","useState","axios","getTrack","useEffect","Playlist","useNavigate","Input","styled","input","StartContainer","main","StyledHeadline","div","StyledOkButton","a","StyledFinishButton","questions","userResponse","current_question","arr","Forms","question","setQuestion","userInput","setUserInput","endQuestions","setEndQuestions","sendRequest","setSendRequesst","songs","setSongs","getSongsAssets","setSongAssets","navigate","parseSongs","listOfSongs","data","JSON","stringify","song_dict","parse","artist","song","Object","entries","counter","searchLimit","songAssets","track_query","push","body","post","then","res","output","text","console","log","error","nextQuestion","length","toString","onUserChangedText","event","target","value","state"],"sources":["/Users/ty/projects/curio/client/src/pages/Form.js"],"sourcesContent":["import styled from \"styled-components/macro\";\nimport { Header } from \"../components\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { getTrack } from \"../spotify\";\nimport { useEffect } from \"react\";\nimport Playlist from \"../components/Playlist\";\nimport { useNavigate } from 'react-router-dom';\n\n\n// import { useNavigate } from 'react-router-dom'\n\nconst Input = styled.input`\n  &:focus {\n    outline: none;\n  }\n  color: white;\n  font-size: 1em;\n  border: 1px;\n  background-color: black;\n  border-bottom: 1px solid grey;\n  width: 570px;\n\n  margin-top: 100px;\n  margin-bottom: 20px;\n  padding-left: 0px;\n  padding-bottom: 15px;\n`;\n\nconst StartContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 87.5vh;\n  background-color: #000;\n  /* justify-content: space-evenly; */\n  align-items: center;\n`;\nconst StyledHeadline = styled.div`\n  color: white;\n  line-height: 58px;\n  font-size: 60px;\n  padding: 5px;\n  font-size: 50px;\n`;\nconst StyledOkButton = styled.a`\n  line-height: 15px;\n  margin-right: 490px;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #603dd3;\n  color: var(--white);\n  border-radius: 10px;\n  font-weight: 7 00;\n  font-family: Inter, Arial;\n  font-size: 1rem;\n  letter-spacing: 0.1px;\n  padding: var(--spacing-sm) var(--spacing-xl);\n\n  &:hover,\n  &:focus {\n    text-decoration: none;\n    filter: brightness(1.1);\n  }\n`;\nconst StyledFinishButton = styled.a`\n  line-height: 15px;\n  margin-right: 10px;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #603dd3;\n  color: var(--white);\n  border-radius: 10px;\n  font-weight: 7 00;\n  font-family: Inter, Arial;\n  font-size: 1rem;\n  letter-spacing: 0.1px;\n  padding: var(--spacing-sm) var(--spacing-xl);\n  margin-top: 140px;\n\n  &:hover,\n  &:focus {\n    text-decoration: none;\n    filter: brightness(1.1);\n  }\n`;\n\nconst questions = [\n  \"How are you feeling today?\",\n  \"What type of music you feel like listening to?\",\n  \"What activity are currently doing?\",\n];\n\nlet userResponse = \"\";\nlet current_question = 0;\n\nlet arr = [];\n\nconst Forms = () => {\n  const [question, setQuestion] = useState(questions[current_question]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [endQuestions, setEndQuestions] = useState(false);\n  const [sendRequest, setSendRequesst] = useState(false);\n  const [songs, setSongs] = useState(null);\n  const [getSongsAssets, setSongAssets] = useState(null)\n\n  const navigate = useNavigate()\n\n  // Helper Function\n  // Parse songs from GPT Response\n  const parseSongs = (listOfSongs) => {\n    let songs = {};\n    let data = JSON.stringify(listOfSongs);\n\n    // Need to JSON.parse twice to get object\n    let song_dict = JSON.parse(JSON.parse(data));\n\n    for (let [artist, song] of Object.entries(song_dict)) {\n      songs[artist] = song;\n    }\n    return songs;\n  };\n\n  // Helper Function\n  // Takes in object of songs {artistName, songName} and\n  // returns songs assets {artisstImage, trackName, artistName}\n\n  useEffect(() => {\n    const getSongsAssets = async (songs) => {\n      let data = null;\n      let counter = 0;\n      const searchLimit = 5;\n      const songAssets = [];\n  \n      // Calls Spotify API to get song assets\n      for (let [artist, song] of Object.entries(songs)) {\n        if (counter === searchLimit) {\n          break;\n        } else {\n          counter++;\n          let track_query = song + \" \" + artist;\n          data = await getTrack(track_query);\n          songAssets.push(data);\n        }\n      }\n      return songAssets;\n    };\n  }, [])\n\n\n  useEffect(() => {\n    if (sendRequest) {\n      const body = JSON.stringify({ userInput: userResponse });\n\n      // Call backend to generate respsonse from OpenAI API\n      axios.post(\"http://localhost:8888/generate\", body).then(async (res) => {\n        // Returns a object of songs: {\"song_name\", \"artist_name\"}\n        const songs = parseSongs(res.data.output.text);\n\n        try {\n          let songAssets = await getSongsAssets(songs);\n          setSongs(songAssets);\n          console.log(songAssets);\n        } catch (error) {\n          console.error(`Failed to get SongAssets from Spotify: ${error}`);\n        }\n      });\n    }\n  }, [sendRequest]);\n\n  // Onclick function to reload next question\n  const nextQuestion = () => {\n    current_question++;\n    if (current_question === questions.length) {\n      setEndQuestions(true);\n    }\n\n    setQuestion(questions[current_question]);\n    userResponse += ` ${userInput.toString()}`;\n  };\n\n  const onUserChangedText = (event) => {\n    setUserInput(event.target.value);\n  };\n\n  return (\n    <>\n      <Header />\n      <StartContainer>\n        {endQuestions ? (\n          <>\n            <StyledHeadline>Ready!</StyledHeadline>\n            <StyledFinishButton onClick={() => setSendRequesst(true)}>\n              Get Playlist\n            </StyledFinishButton>\n          </>\n        ) : (\n          <>\n            <StyledHeadline>{question}</StyledHeadline>\n            <Input placeholder=\"Type here\" onChange={onUserChangedText} />\n            <StyledOkButton onClick={nextQuestion}>Ok</StyledOkButton>\n          </>\n        )}\n        {songs ? (\n          // <Playlist artist={songs} />\n          navigate('/artist', {state: songs})\n          \n          \n          \n        ) : (\n          <>\n            <div>Songs not loaded yet</div>\n          </>\n        )}\n      </StartContainer>\n    </>\n  );\n};\n\nexport default Forms;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}