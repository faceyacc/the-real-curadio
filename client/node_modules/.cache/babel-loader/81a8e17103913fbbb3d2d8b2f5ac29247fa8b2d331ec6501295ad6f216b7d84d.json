{"ast":null,"code":"import axios from 'axios';\n\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n};\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error');\n\n  // If there's an error OR the token in localStorage has expired, refresh the token\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n\n  // If there is a valid access token in localStorage, use that\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  // If there is a token in the URL query params, user is logging in for the first time\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    }\n    // Set timestamp\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n    // Return access token from query params\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  // We should never get here!\n  return false;\n};\n\n/**\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\n * and now is greater than the expiration time of 3600 seconds (1 hour).\n * @returns {boolean} Whether or not the access token in localStorage has expired\n */\nconst hasTokenExpired = () => {\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return millisecondsElapsed / 1000 > Number(expireTime);\n};\n\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n      console.error('No refresh token available');\n      logout();\n    }\n\n    // Use `/refresh_token` endpoint from our Node app\n    const {\n      data\n    } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\n\n    // Update localStorage values\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\n    // Reload the page for localStorage updates to be reflected\n    window.location.reload();\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  }\n  // Navigate to homepage\n  window.location = window.location.origin;\n};\n\n// Helper function\nconst search_song = track => {\n  track = track.replace(/ /g, '%2520');\n  const baseURL = `search?q=${track}&type=track`;\n  return baseURL;\n};\n\n/**\n * Get song by track name and artits' name\n * @param {string} track - track's name\n * @param {string} artist - artist's name\n */\nexport const getTrack = (track, artist) => {\n  const url = search_song(track, artist);\n  console.log(url);\n  return axios.get(`/${url}`);\n};\nexport const getAssets = async songList => {\n  let songAssets = [];\n  let counter = 0;\n  const searchLimit = 5;\n  let data = null;\n\n  // Calls Spotify API to get song assets\n  for (let [artist, song] of Object.entries(songList)) {\n    if (counter === searchLimit) {\n      break;\n    } else {\n      counter++;\n      let track_query = song + ' ' + artist;\n      data = await getTrack(track_query);\n      songAssets.push(data);\n    }\n  }\n\n  // console.log(`LIST OF ASSETS=====> ${songAssets}`)\n  // return songAssets   \n};\n\nexport const accessToken = getAccessToken();\n\n/**\n * Axios global request headers\n * https://github.com/axios/axios#global-axios-defaults\n */\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\naxios.defaults.headers['Content-Type'] = 'application/json';\nexport const getCurrentUserProfile = () => axios.get('/me');","map":{"version":3,"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getAccessToken","queryString","location","search","urlParams","URLSearchParams","queryParams","get","hasError","hasTokenExpired","property","setItem","Date","now","millisecondsElapsed","Number","console","error","logout","data","access_token","reload","e","removeItem","origin","search_song","track","replace","baseURL","getTrack","artist","url","log","getAssets","songList","songAssets","counter","searchLimit","song","Object","entries","track_query","push","defaults","headers","getCurrentUserProfile"],"sources":["/Users/ty/projects/curio/client/src/spotify.js"],"sourcesContent":["import axios from 'axios'\n\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp',\n}\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n}\n\n\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\n  };\n  const hasError = urlParams.get('error');\n\n  // If there's an error OR the token in localStorage has expired, refresh the token\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n\n  // If there is a valid access token in localStorage, use that\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  // If there is a token in the URL query params, user is logging in for the first time\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    }\n    // Set timestamp\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n    // Return access token from query params\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  // We should never get here!\n  return false;\n}\n\n\n/**\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\n * and now is greater than the expiration time of 3600 seconds (1 hour).\n * @returns {boolean} Whether or not the access token in localStorage has expired\n */\nconst hasTokenExpired = () => {\n  const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return (millisecondsElapsed / 1000) > Number(expireTime);\n}\n\n\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken ||\n      LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\n      (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\n    ) {\n      console.error('No refresh token available');\n      logout();\n    }\n\n    // Use `/refresh_token` endpoint from our Node app\n    const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\n\n    // Update localStorage values\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\n    // Reload the page for localStorage updates to be reflected\n    window.location.reload();\n\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  }\n  // Navigate to homepage\n  window.location = window.location.origin;\n}\n\n// Helper function\nconst search_song = (track) => {\n  track = track.replace(/ /g, '%2520')\n  const baseURL = `search?q=${track}&type=track`\n  \n  return baseURL\n}\n\n\n/**\n * Get song by track name and artits' name\n * @param {string} track - track's name\n * @param {string} artist - artist's name\n */\nexport const getTrack = (track, artist) => {\n  const url = search_song(track, artist)\n  console.log(url)\n  return axios.get(`/${url}`)\n}\n\n\nexport const getAssets = async (songList) => {\n  let songAssets = []\n  let counter = 0;\n  const searchLimit = 5\n  let data = null\n\n  // Calls Spotify API to get song assets\n  for(let [artist, song] of Object.entries(songList)) {   \n    if (counter === searchLimit) {\n      break\n    }  else {\n      counter++\n      let track_query = song + ' ' + artist\n      \n      data  = await getTrack(track_query)\n      \n      songAssets.push(data)\n    }\n  }\n\n  \n\n\n\n\n  // console.log(`LIST OF ASSETS=====> ${songAssets}`)\n  // return songAssets   \n\n}\n\n\n\n\nexport const accessToken = getAccessToken()\n\n/**\n * Axios global request headers\n * https://github.com/axios/axios#global-axios-defaults\n */\naxios.defaults.baseURL = 'https://api.spotify.com/v1'\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`\naxios.defaults.headers['Content-Type'] = 'application/json'\n\n\nexport const getCurrentUserProfile = () => axios.get('/me')\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}