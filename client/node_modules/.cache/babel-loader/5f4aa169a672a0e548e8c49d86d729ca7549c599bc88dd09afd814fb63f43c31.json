{"ast":null,"code":"var _jsxFileName = \"/Users/ty/projects/curio/client/src/components/Playlist.js\";\nimport { StyledGrid } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Playlist = _ref => {\n  let {\n    artists\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: artists && artists.length ?\n    /*#__PURE__*/\n    // <h1>{artists.length}</h1>\n    _jsxDEV(_Fragment, {\n      children: artists.map((artists, i) => /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: artists.tracks.items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 11\n      }, this))\n    }, void 0, false)\n\n    // <StyledGrid type=\"artist\">\n    //   {artists.map((artist, i) => (\n    //     <li className=\"grid__item\" key={i}>\n    //       <div className=\"grid__item__inner\">\n    //         {artist.images[0] && (\n    //           <div className=\"grid__item__img\">\n    //             <img src={artist.images[0].url} alt={artist.name} />\n    //           </div>\n    //         )}\n    //         <h3 className=\"grid__item__name overflow-ellipsis\">{artist.name}</h3>\n    //         <p className=\"grid__item__label\">Artist</p>\n    //       </div>\n    //     </li>\n    //   ))}\n    // </StyledGrid>\n    : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"empty-notice\",\n      children: \"No artists available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["StyledGrid","Playlist","artists","length","map","i","tracks","items"],"sources":["/Users/ty/projects/curio/client/src/components/Playlist.js"],"sourcesContent":["import { StyledGrid } from '../styles';\n\nconst Playlist = ({ artists }) => (\n  <>\n    {artists && artists.length ? (\n      // <h1>{artists.length}</h1>\n      <>\n        {artists.map((artists, i) => (\n          <h1>{artists.tracks.items}</h1>  \n        ))}\n      \n      </>\n\n      \n      // <StyledGrid type=\"artist\">\n      //   {artists.map((artist, i) => (\n      //     <li className=\"grid__item\" key={i}>\n      //       <div className=\"grid__item__inner\">\n      //         {artist.images[0] && (\n      //           <div className=\"grid__item__img\">\n      //             <img src={artist.images[0].url} alt={artist.name} />\n      //           </div>\n      //         )}\n      //         <h3 className=\"grid__item__name overflow-ellipsis\">{artist.name}</h3>\n      //         <p className=\"grid__item__label\">Artist</p>\n      //       </div>\n      //     </li>\n      //   ))}\n      // </StyledGrid>\n    ) : (\n      <p className=\"empty-notice\">No artists available</p>\n    )}\n  </>\n);\n\n\nexport default Playlist"],"mappings":";AAAA,SAASA,UAAU,QAAQ,WAAW;AAAC;AAAA;AAEvC,MAAMC,QAAQ,GAAG;EAAA,IAAC;IAAEC;EAAQ,CAAC;EAAA,oBAC3B;IAAA,UACGA,OAAO,IAAIA,OAAO,CAACC,MAAM;IAAA;IACxB;IACA;MAAA,UACGD,OAAO,CAACE,GAAG,CAAC,CAACF,OAAO,EAAEG,CAAC,kBACtB;QAAA,UAAKH,OAAO,CAACI,MAAM,CAACC;MAAK;QAAA;QAAA;QAAA;MAAA,QAC1B;IAAC;;IAKJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,eAEA;MAAG,SAAS,EAAC,cAAc;MAAA,UAAC;IAAoB;MAAA;MAAA;MAAA;IAAA;EACjD,iBACA;AAAA,CACJ;AAAC,KA/BIN,QAAQ;AAkCd,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}