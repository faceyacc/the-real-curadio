{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ty/projects/curadio/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/ty/projects/curadio/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _defineProperty from\"/Users/ty/projects/curadio/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import axios from'axios';// Map for localStorage keys\nvar LOCALSTORAGE_KEYS={accessToken:'spotify_access_token',refreshToken:'spotify_refresh_token',expireTime:'spotify_token_expire_time',timestamp:'spotify_token_timestamp'};// Map to retrieve localStorage values\nvar LOCALSTORAGE_VALUES={accessToken:window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),refreshToken:window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),expireTime:window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),timestamp:window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)};/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */var getAccessToken=function getAccessToken(){var _queryParams;var queryString=window.location.search;var urlParams=new URLSearchParams(queryString);var queryParams=(_queryParams={},_defineProperty(_queryParams,LOCALSTORAGE_KEYS.accessToken,urlParams.get('access_token')),_defineProperty(_queryParams,LOCALSTORAGE_KEYS.refreshToken,urlParams.get('refresh_token')),_defineProperty(_queryParams,LOCALSTORAGE_KEYS.expireTime,urlParams.get('expires_in')),_queryParams);var hasError=urlParams.get('error');// If there's an error OR the token in localStorage has expired, refresh the token\nif(hasError||hasTokenExpired()||LOCALSTORAGE_VALUES.accessToken==='undefined'){refreshToken();}// If there is a valid access token in localStorage, use that\nif(LOCALSTORAGE_VALUES.accessToken&&LOCALSTORAGE_VALUES.accessToken!=='undefined'){return LOCALSTORAGE_VALUES.accessToken;}// If there is a token in the URL query params, user is logging in for the first time\nif(queryParams[LOCALSTORAGE_KEYS.accessToken]){// Store the query params in localStorage\nfor(var property in queryParams){window.localStorage.setItem(property,queryParams[property]);}// Set timestamp\nwindow.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp,Date.now());// Return access token from query params\nreturn queryParams[LOCALSTORAGE_KEYS.accessToken];}// We should never get here!\nreturn false;};/**\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\n * and now is greater than the expiration time of 3600 seconds (1 hour).\n * @returns {boolean} Whether or not the access token in localStorage has expired\n */var hasTokenExpired=function hasTokenExpired(){var accessToken=LOCALSTORAGE_VALUES.accessToken,timestamp=LOCALSTORAGE_VALUES.timestamp,expireTime=LOCALSTORAGE_VALUES.expireTime;if(!accessToken||!timestamp){return false;}var millisecondsElapsed=Date.now()-Number(timestamp);return millisecondsElapsed/1000>Number(expireTime);};/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */var refreshToken=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _yield$axios$get,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;// Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\nif(!LOCALSTORAGE_VALUES.refreshToken||LOCALSTORAGE_VALUES.refreshToken==='undefined'||Date.now()-Number(LOCALSTORAGE_VALUES.timestamp)/1000<1000){console.error('No refresh token available');logout();}// Use `/refresh_token` endpoint from our Node app\n_context.next=4;return axios.get(\"/refresh_token?refresh_token=\".concat(LOCALSTORAGE_VALUES.refreshToken));case 4:_yield$axios$get=_context.sent;data=_yield$axios$get.data;// Update localStorage values\nwindow.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken,data.access_token);window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp,Date.now());// Reload the page for localStorage updates to be reflected\nwindow.location.reload();_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 14:case\"end\":return _context.stop();}},_callee,null,[[0,11]]);}));return function refreshToken(){return _ref.apply(this,arguments);};}();/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */export var logout=function logout(){// Clear all localStorage items\nfor(var property in LOCALSTORAGE_KEYS){window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);}// Navigate to homepage\nwindow.location=window.location.origin;};// Helper function\nvar search_song=function search_song(track){track=track.replace(/ /g,'%2520');var baseURL=\"search?q=\".concat(track,\"&type=track\");return baseURL;};/**\n * Get song by track name and artits' name\n * @param {string} track - track's name\n * @param {string} artist - artist's name\n */export var getTrack=function getTrack(track,artist){var url=search_song(track,artist);return axios.get(\"/\".concat(url));};export var accessToken=getAccessToken();/**\n * Axios global request headers\n * https://github.com/axios/axios#global-axios-defaults\n */axios.defaults.baseURL='https://api.spotify.com/v1';axios.defaults.headers['Authorization']=\"Bearer \".concat(accessToken);axios.defaults.headers['Content-Type']='application/json';export var getCurrentUserProfile=function getCurrentUserProfile(){return axios.get('/me');};","map":{"version":3,"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getAccessToken","_queryParams","queryString","location","search","urlParams","URLSearchParams","queryParams","_defineProperty","get","hasError","hasTokenExpired","property","setItem","Date","now","millisecondsElapsed","Number","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$get","data","wrap","_callee$","_context","prev","next","console","error","logout","concat","sent","access_token","reload","t0","stop","apply","arguments","removeItem","origin","search_song","track","replace","baseURL","getTrack","artist","url","defaults","headers","getCurrentUserProfile"],"sources":["/Users/ty/projects/curadio/client/src/spotify.js"],"sourcesContent":["import axios from 'axios'\n\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp',\n}\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n}\n\n\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\n  };\n  const hasError = urlParams.get('error');\n\n  // If there's an error OR the token in localStorage has expired, refresh the token\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n\n  // If there is a valid access token in localStorage, use that\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  // If there is a token in the URL query params, user is logging in for the first time\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    }\n    // Set timestamp\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n    // Return access token from query params\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  // We should never get here!\n  return false;\n}\n\n\n/**\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\n * and now is greater than the expiration time of 3600 seconds (1 hour).\n * @returns {boolean} Whether or not the access token in localStorage has expired\n */\nconst hasTokenExpired = () => {\n  const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return (millisecondsElapsed / 1000) > Number(expireTime);\n}\n\n\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken ||\n      LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\n      (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\n    ) {\n      console.error('No refresh token available');\n      logout();\n    }\n\n    // Use `/refresh_token` endpoint from our Node app\n    const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\n\n    // Update localStorage values\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\n    // Reload the page for localStorage updates to be reflected\n    window.location.reload();\n\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  }\n  // Navigate to homepage\n  window.location = window.location.origin;\n}\n\n// Helper function\nconst search_song = (track) => {\n  track = track.replace(/ /g, '%2520')\n  const baseURL = `search?q=${track}&type=track`  \n  return baseURL\n}\n\n\n/**\n * Get song by track name and artits' name\n * @param {string} track - track's name\n * @param {string} artist - artist's name\n */\nexport const getTrack = (track, artist) => {\n  const url = search_song(track, artist)\n  return axios.get(`/${url}`)\n}\n\n\n\n\nexport const accessToken = getAccessToken()\n/**\n * Axios global request headers\n * https://github.com/axios/axios#global-axios-defaults\n */\naxios.defaults.baseURL = 'https://api.spotify.com/v1'\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`\naxios.defaults.headers['Content-Type'] = 'application/json'\n\n\nexport const getCurrentUserProfile = () => axios.get('/me')\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}